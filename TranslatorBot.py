import telebot
from telebot import types
from googletrans import Translator
import mysql.connector
import random

db_config = {
    'user': 'root', 
    'password': 'admin', 
    'host': 'localhost',
    'database': 'dictionaryBot',
}

conn = mysql.connector.connect(**db_config)
cursor = conn.cursor()

API_TOKEN = ''
bot = telebot.TeleBot(API_TOKEN)
translator = Translator()
# –û–ø—Ä–µ–¥–µ–ª–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —è–∑—ã–∫–∏
languages = {
    'üá∑üá∫–†—É—Å—Å–∫–∏–π': 'ru',
    'üá¨üáß–ê–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en',
    'üá©üá™–ù–µ–º–µ—Ü–∫–∏–π': 'de'
}

user_language_preferences = {}
user_testing_progress = {}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_language_preferences[chat_id] = {'src': None, 'dest': None}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton('/start')
    stop_button = types.KeyboardButton('/stop')
    test_button = types.KeyboardButton('üìù–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    about_button = types.KeyboardButton('üîé–û –±–æ—Ç–µ')
    markup.add(start_button, stop_button)
    markup.add(test_button, about_button)

    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã", reply_markup=markup)

    markup = types.InlineKeyboardMarkup()
    for lang in languages:
        markup.add(types.InlineKeyboardButton(text=lang, callback_data=f'src_{languages[lang]}'))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:", reply_markup=markup)

@bot.message_handler(commands=['stop'])
def stop(message):
    chat_id = message.chat.id
    if chat_id in user_language_preferences:
        del user_language_preferences[chat_id]
    if chat_id in user_testing_progress:
        del user_testing_progress[chat_id]
    markup = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['üìù–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'üîé–û –±–æ—Ç–µ'])
def handle_custom_buttons(message):
    if message.text == 'üìù–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
        choose_training_language(message)
    elif message.text == 'üîé–û –±–æ—Ç–µ':
        send_about_message(message)

def send_about_message(message):
    chat_id = message.chat.id
    about_text = (
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤.\n\n"
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:\n"
        "1. –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º, –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏ –Ω–µ–º–µ—Ü–∫–∏–º —è–∑—ã–∫–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –∫–∞–∫–æ–π –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ! –ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ /start –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.\n"
        "2. –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –∑–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω—è—Ö –æ—Ç A1 –¥–æ C2. –í—ã—è–≤–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º –ø—Ä–æ—Ö–æ–¥—è —Ç–µ—Å—Ç—ã!\n\n"
        "–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
    bot.send_message(chat_id, about_text)

def choose_training_language(message):
    chat_id = message.chat.id

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='üá¨üáß–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', callback_data='train_en'))
    markup.add(types.InlineKeyboardButton(text='üá©üá™–ù–µ–º–µ—Ü–∫–∏–π', callback_data='train_de'))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('train_'))
def choose_language_level(call):
    chat_id = call.message.chat.id
    training_language = call.data.split('_')[1]

    user_testing_progress[chat_id] = {'training_language': training_language}

    markup = types.InlineKeyboardMarkup()
    levels = ['‚ö™A1', 'üü¢A2', 'üü°B1', 'üü†B2', 'üî¥C1', '‚ö´C2']
    for level in levels:
        markup.add(types.InlineKeyboardButton(text=level, callback_data=f'test_{level}'))
    
    lang = '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É' if training_language == 'en' else '–Ω–µ–º–µ—Ü–∫–æ–º—É'
    bot.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç –ø–æ " + lang + "\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", chat_id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('test_'))
def starting_test(call):
    chat_id = call.message.chat.id
    level = call.data.split('_')[1]
    level = level[1:]

    training_language = user_testing_progress[chat_id]['training_language']
    table_name = f'words_{level}' if training_language == 'en' else f'words_{level}_de'
    column_name = f'word_{level}_en' if training_language == 'en' else f'word_{level}_de'

    # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤
    cursor.execute(f"SELECT word_{level}_ru, {column_name} FROM {table_name} ORDER BY RAND() LIMIT 5")
    words = cursor.fetchall()

    if chat_id not in user_testing_progress:
        user_testing_progress[chat_id] = {'words': [], 'current_word': 0, 'correct': 0, 'errors': []}
    
    user_testing_progress[chat_id]['words'] = words
    user_testing_progress[chat_id]['current_word'] = 0
    user_testing_progress[chat_id]['correct'] = 0
    user_testing_progress[chat_id]['errors'] = []

    lang = '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É' if training_language == 'en' else '–Ω–µ–º–µ—Ü–∫–æ–º—É'

    #bot.send_message(chat_id, "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è " + level + " " + lang + " —è–∑—ã–∫–∞")
    bot.edit_message_text("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ " + lang + " —É—Ä–æ–≤–Ω—è " + level, chat_id, call.message.message_id)

    ask_next_word(chat_id)

def ask_next_word(chat_id):
    progress = user_testing_progress[chat_id]
    if progress['current_word'] < len(progress['words']):
        word = progress['words'][progress['current_word']][0]
        bot.send_message(chat_id, f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: {word}")
    else:
        show_results(chat_id)

@bot.message_handler(func=lambda message: message.chat.id in user_testing_progress)
def handle_test_response(message):
    chat_id = message.chat.id
    progress = user_testing_progress[chat_id]
    word, correct_translation = progress['words'][progress['current_word']]
    
    if message.text.strip().lower() in correct_translation.strip().lower():
        progress['correct'] += 1
    else:
        progress['errors'].append((word, correct_translation, message.text.strip()))

    progress['current_word'] += 1
    ask_next_word(chat_id)

def show_results(chat_id):
    progress = user_testing_progress[chat_id]
    total_words = len(progress['words'])
    correct_answers = progress['correct']
    
    result_message = f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_words}\n"
    if progress['errors']:
        result_message += "\n–û—à–∏–±–∫–∏:\n"
        for word, correct_translation, user_translation in progress['errors']:
            result_message += f"–°–ª–æ–≤–æ: {word}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {correct_translation}\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_translation}\n\n"
    
    if user_language_preferences[chat_id]['src'] == 'ru': sourceLang = '—Ä—É—Å—Å–∫–æ–≥–æ'
    elif user_language_preferences[chat_id]['src'] == 'en': sourceLang = '–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ'
    else: sourceLang = '–Ω–µ–º–µ—Ü–∫–æ–≥–æ'

    if user_language_preferences[chat_id]['dest'] == 'ru': transLang = '—Ä—É—Å—Å–∫–∏–π'
    elif user_language_preferences[chat_id]['dest'] == 'en': transLang = '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'
    else: transLang = '–Ω–µ–º–µ—Ü–∫–∏–π'

    result_message += f"–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–∞ —Å " + sourceLang + " –Ω–∞ " + transLang + " –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –µ—â–µ –æ–¥–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"

    bot.send_message(chat_id, result_message)
    del user_testing_progress[chat_id]

@bot.callback_query_handler(func=lambda call: call.data.startswith('src_'))
def set_source_language(call):
    chat_id = call.message.chat.id
    src_lang_code = call.data.split('_')[1]
    user_language_preferences[chat_id]['src'] = src_lang_code

    markup = types.InlineKeyboardMarkup()
    for lang in languages:
        markup.add(types.InlineKeyboardButton(text=lang, callback_data=f'dest_{languages[lang]}'))
    
    if user_language_preferences[chat_id]['src'] == 'ru': sourceLang = '—Ä—É—Å—Å–∫–æ–≥–æ'
    elif user_language_preferences[chat_id]['src'] == 'en': sourceLang = '–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ'
    else: sourceLang = '–Ω–µ–º–µ—Ü–∫–æ–≥–æ'

    bot.edit_message_text("–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å " + sourceLang + "\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", chat_id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('dest_'))
def set_destination_language(call):
    chat_id = call.message.chat.id
    dest_lang_code = call.data.split('_')[1]
    user_language_preferences[chat_id]['dest'] = dest_lang_code

    if user_language_preferences[chat_id]['src'] == 'ru': sourceLang = '—Ä—É—Å—Å–∫–æ–≥–æ'
    elif user_language_preferences[chat_id]['src'] == 'en': sourceLang = '–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ'
    else: sourceLang = '–Ω–µ–º–µ—Ü–∫–æ–≥–æ'

    if user_language_preferences[chat_id]['dest'] == 'ru': transLang = '—Ä—É—Å—Å–∫–∏–π'
    elif user_language_preferences[chat_id]['dest'] == 'en': transLang = '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'
    else: transLang = '–Ω–µ–º–µ—Ü–∫–∏–π'

    bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å " + sourceLang + " –Ω–∞ " + transLang + ". –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", chat_id, call.message.message_id, reply_markup=None)

@bot.message_handler(func=lambda message: user_language_preferences[message.chat.id]['src'] and user_language_preferences[message.chat.id]['dest'])
def translate_message(message):
    chat_id = message.chat.id
    src_lang = user_language_preferences[chat_id]['src']
    dest_lang = user_language_preferences[chat_id]['dest']

    try:
        translation = translator.translate(message.text, src=src_lang, dest=dest_lang)
        bot.send_message(chat_id, translation.text)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

bot.polling()